<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[The Blog]]></title><description><![CDATA[A blog where I talk about things that are relevant to me.]]></description><link>https://gatsby-starter-blog-demo.netlify.com/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 02 Nov 2019 04:07:24 GMT</lastBuildDate><item><title><![CDATA[Proxy API requests in local development]]></title><description><![CDATA[When building a web application these days there’s a general pattern of
separating it into: A front-end server which serves your application…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//local-development-devproxy/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//local-development-devproxy/</guid><pubDate>Sat, 02 Nov 2019 03:50:21 GMT</pubDate><content:encoded>&lt;p&gt;When building a web application these days there’s a general pattern of
separating it into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A front-end server which serves your application&lt;/li&gt;
&lt;li&gt;A back-end server which serves your API (REST, or something else)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s say that your developing an application locally with your servers
listening on the following hosts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Front-end -&gt; &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Back-end -&gt; &lt;code class=&quot;language-text&quot;&gt;http://localhost:4000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From your internet browser you’ll navigate to &lt;code class=&quot;language-text&quot;&gt;http:localhost:3000&lt;/code&gt; so that you
can access and interact with your application. However, if your application
tries to reach out to the back-end server API, you’ll probably see an error
message that looks something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;No &amp;#39;Access-Control-Allow-Origin&amp;#39; header is present on the requested resource. 
Origin &amp;#39;http://localhost:3000&amp;#39; is therefore not allowed access.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;http:localhost:4000&lt;/code&gt; are considered
different hosts due to their differing port numbers. Your browser, for security
reasons, is preventing the application that you’re looking at (served via your
front-end server) from reaching out to, from its perspective, some unknown and
potentially hostile server on the internet (served via your back-end server).&lt;/p&gt;
&lt;p&gt;If you do some digging you’ll find that you can solve the problem by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding the &lt;code class=&quot;language-text&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt; header to the http requests made
from your front-end server&lt;/li&gt;
&lt;li&gt;Importing a library and using it to scaffold basic CORS on your back-end
server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But wait! Since this is in local development, there’s a better way to solve the
problem. You can have your front-end server proxy API requests to your back-end
server.&lt;/p&gt;
&lt;p&gt;The idea behind proxying here is that your browser will only ever reach out to
&lt;code class=&quot;language-text&quot;&gt;http://localhost:3000&lt;/code&gt;. However, you can then have your front-end server pass
API requests through to &lt;code class=&quot;language-text&quot;&gt;http://localhost:4000&lt;/code&gt; and return whatever the back-end
server responds with to the application running in your browser. This way
your browser will never know that another server even exists. It’ll have nothing
to complain about.&lt;/p&gt;
&lt;p&gt;Modern web frameworks all have different ways of setting up this kind of
proxying. For example, if you’re using &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt;, then you
can add &lt;a href=&quot;https://cli.vuejs.org/config/#devserver-proxy&quot;&gt;this&lt;/a&gt; option to your
&lt;code class=&quot;language-text&quot;&gt;vue.config.js&lt;/code&gt; file, and you’re good to go!&lt;/p&gt;
&lt;p&gt;I highly recommend this approach as it’s much easier than fiddling with CORS,
especially if it won’t even be an issue for you in production.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Readers will scale your organization]]></title><description><![CDATA[Introduction A typical organization has two kinds of workers: readers and non-readers. Readers take the time to consume written information…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//readers-scale-organizations/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//readers-scale-organizations/</guid><pubDate>Sun, 21 Jul 2019 19:01:09 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A typical organization has two kinds of workers: readers and non-readers. Readers take the time to consume written information like emails, design documents, wiki pages, and code, before proceeding in further communication. Non-readers, however, will skip that step of the communication process and either start organizing meetings or begin working on their tasks. This leads to a lot of unnecessary meetings and rework.&lt;/p&gt;
&lt;p&gt;Organizations need more readers and less non-readers, especially in the age of remote, asynchronous work.&lt;/p&gt;
&lt;h1&gt;The symptoms of non-reader majority organizations&lt;/h1&gt;
&lt;p&gt;A organization that consists mostly of non-readers will tend to fall into behavior traps that are the antithesis of asynchronous and remote work. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;There are a lot of meetings.&lt;/strong&gt; Emails are written, memos are sent, and design documents are up for review. However, nobody bothers to take a look at them. Instead, people  choose to physically gather around later and verbally discuss what’s already been written, and in extreme cases simply read documents and emails aloud together. This is a massive waste of time and the synchronicity of it hinders an organization’s ability to scale out of its physical location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A lot of major decisions are made at the “watercooler”.&lt;/strong&gt; A lack of reading permeates the culture of an organization to the point where nothing is written down. Major decisions are made on the fly and communicated to the relevant parties at the last possible second. This leads to a lot of churn.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There’s a lot of rework.&lt;/strong&gt; Conversations are had, decisions are made, and action items are captured. However, people either don’t review or misinterpret what’s been written and end up working on the wrong things. Because of this a lot of work needs to be redone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There’s a lot of impatience.&lt;/strong&gt; Taking the time to read something requires patience. However, in an organization of non-readers, there will be a severe lack of it. This leads to the classic situation where an email becomes a chat message, which becomes a tap on the shoulder, all within the span of a few minutes. If people could rest assured that others were taking the time to read, understand, and respond to their communications, then they would be able to sit back and be patient.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How can organizations convert non-readers into readers?&lt;/h1&gt;
&lt;p&gt;An organization needs to convert their non-readers into readers. They can start by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encouraging thoughtful writing.&lt;/strong&gt; Reading and writing are two sides of the same coin. Your writing is more likely to be read if it’s thoughtfully constructed. Sometimes people don’t like to read simply because it’s hard to navigate the labyrinth that is the typical office document.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asking workers to have more patience.&lt;/strong&gt; We’re always rushing to slam tasks off of our todo lists. While one will certainly make progress this way, the distance travelled won’t be far. Taking the time to communicate well, and consuming communication thoughtfully is likely to slow you down at first, but you’ll end up traveling much further in the long run. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insisting that people read relevant communications before calling a meeting.&lt;/strong&gt; Anything worth discussing should be written down and shared with the team. Any further communication on the topic should be communicated textually. If, however, a meeting is called, then everyone should be expected to have read up on the topic, or that the &lt;a href=&quot;https://www.cnbc.com/2018/04/23/what-jeff-bezos-learned-from-requiring-6-page-memos-at-amazon.html&quot;&gt;first few minutes of the meeting are dedicated to reading&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adopting better tools.&lt;/strong&gt; Email is not always the best format for written discussion because it can become unwieldy for readers to follow. Using a tool that supports threaded discussion as a first-class concept can help with this. I’ve heard of organizations out there using an internal &lt;a href=&quot;https://www.discourse.org/&quot;&gt;Discourse&lt;/a&gt; instance to facilitate threaded, &lt;a href=&quot;https://www.reddit.com/&quot;&gt;Reddit&lt;/a&gt;-like discussions. If your organization develops software then putting all of your discussions in issues, as supported by &lt;a href=&quot;https://guides.github.com/features/issues/&quot;&gt;Github&lt;/a&gt; or &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/issues/&quot;&gt;Gitlab&lt;/a&gt;, might be even better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Caveats&lt;/h1&gt;
&lt;p&gt;Not everything is worth reading, this is just a fact of life. However, that is no excuse to never read &lt;strong&gt;anything&lt;/strong&gt;. Reading isn’t just an act, but a practice, and by doing it over-and-over again, one gets better at distinguishing between things that should be read, and things that should be ignored.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Reading is critical for the success of any modern organization. If you want to scale your organization then you should encourage everyone, as much as possible, to become readers.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Keeping an engineering notebook]]></title><description><![CDATA[Introduction When I first started programming, my problem solving approach was haphazard. When I needed to implement something, I would…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//engineering-notebook/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//engineering-notebook/</guid><pubDate>Tue, 25 Jun 2019 02:40:40 GMT</pubDate><content:encoded>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When I first started programming, my problem solving approach was haphazard. When I needed to implement something, I would think about it for a few minutes, and then go off and start banging my head against an editor. Staring at the screen for hours, I’d slowly slog through it. However, everything changed when I started keeping a digital engineering notebook. I am now a much more effective individual and collaborator.&lt;/p&gt;
&lt;h1&gt;What is an engineering notebook?&lt;/h1&gt;
&lt;p&gt;An engineering notebook consists of a series of notes that you keep for yourself while working on a given project or problem. In my case, everyday I create a new page in the section designated for my current project and begin free writing my thoughts on the problem at hand. These notes are generally for my eyes only. I fill the page with goal statements, step-by-step high level solutions, links to relevant information, and more. If I want to know what I was doing or thinking on any given day I can jump to the log entry for that day and give it a read.&lt;/p&gt;
&lt;h1&gt;Why do I keep an engineering notebook?&lt;/h1&gt;
&lt;p&gt;I’ve experienced many benefits since I started keeping an engineering log:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It gives me a place to start.&lt;/strong&gt; Before the engineering notebook, when I tried to solve a problem, I would stare at the screen, frustrated that I wasn’t making any progress. Now I just start by writing down what I know right now, what I don’t know, avenues to explore, and things to try. The act of writing  problem-solving kick starter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It lowers my stress levels.&lt;/strong&gt; Capturing anything and everything in your head is one of the core step’s in David Allen’s GTD methodology. David argues that having an uncaptured item floating around in your head applies a psychic weight on you which weighs you down and stresses you out. I believe that this same concept applies not just to todo lists, but to technical problem solving. For any given problem there’s a lot of context involved and if I don’t write it down it just floats around in my head. However, by writing it down, I release it’s hold on me, and alleviate the pressure of any lingering psychic weight. This reduces my stress and improves my focus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I can catch potential problems sooner.&lt;/strong&gt; The worst thing that can happen to me, when I’m working on a technical problem, is realizing that I missed a very important detail early in analysis. It means I now need to go back and do some heavy, error-prone rework, while facing a  now tight deadline. Had I given some more thought to the problem upfront, I could have caught those little details, and worked them into my solution. Keeping an engineering notebook helps facilitate this. Early in the problem solving process, when I dump everything in my head onto the page, I suddenly start making connections and begin asking questions otherwise would have remained hidden. The act of writing can help the brain remember important information, or consider an avenue that it otherwise wouldn’t have.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It helps me keep my place.&lt;/strong&gt; When I go on a long vacation or switch gears for a while, anything related to what I was working previously floats away disappears from my mind. It’s a gift and a curse. When I come back to the project later, I’d typically be left scratching my head. However,  what I do now is go to the most recent page in the project’s engineering notebook and start reading it. This helps me get back up to speed quickly. This is also useful when I’m interrupted in the middle of a task. When I come back to what I was doing pre-interruption I can give my notes a quick glance reload the lost context into my working memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I can justify my decisions.&lt;/strong&gt; When I propose a solution as a programmer, or solve a problem in a certain way, my collaborators will sometimes ask me what advantages my solution has, or why I decided to go with solution A instead of solution B. These questions are easier to answer now because my justifications are written in my engineering notebook. This content is even more valuable when I need to come back months later to try to help someone understand why something was done a certain way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What kinds of things do I write down?&lt;/h1&gt;
&lt;p&gt;There are so many things that someone could write in an eingineering notebook. What kinds of things are worth recording? Here are just some of the things that I record:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relevant parts of story cards or requirements&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-level approaches for solving a given problem,&lt;/strong&gt; quickly jotting down a high level approach to how I’m going to solve something is valuable. I can cross off each step as its implemented, or re-arrange things before I start writing code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Things to follow-up on later&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conclusions from any investigations and/or deadends,&lt;/strong&gt; I will note down functions I looked at, or relevant code snippets. This helps me avoid having to do it again later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Links to relevant emails or websites&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Temporarily important information, like a server ip or test data&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Some relevant resources to review&lt;/h1&gt;
&lt;p&gt;Keeping an engineering log is not an idea I came up with on my own. Here are some relevant resources from where I picked up some ideas on this topic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/General_Engineering_Introduction/Notebooks&quot;&gt;https://en.wikibooks.org/wiki/General&lt;em&gt;Engineering&lt;/em&gt;Introduction/Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plaintext-productivity.net/2-09-work-journal.html&quot;&gt;https://plaintext-productivity.net/2-09-work-journal.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also check out &lt;a href=&quot;https://hamberg.no/gtd/&quot;&gt;GTD&lt;/a&gt;, which I mentioned above.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;As you can see, I’ve benefitted a lot from keeping an engineering notebook. While it’s not a silver bullet by any means, it’s easy enough to get started that I think you should give it a shot. You might end up liking it more than you think.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Optimizing your Tree Style Tab experience with groups]]></title><description><![CDATA[If you’re using  Firefox  and have the  Tree Style Tab   (TST)  extension installed, you can create a TST group by navigating to the…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//firefox-treestyletab-tip/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//firefox-treestyletab-tip/</guid><pubDate>Thu, 06 Jun 2019 02:13:51 GMT</pubDate><content:encoded>&lt;p&gt;If you’re using &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt; and have the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/&quot;&gt;Tree Style Tab&lt;/a&gt; &lt;em&gt;(TST)&lt;/em&gt; extension installed, you can create a TST group by navigating to the following URL: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;about:treestyletab-group?title=MyGroup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TST groups are useful for organization purposes because they give you an &lt;em&gt;empty&lt;/em&gt;
space to throw bunch of browser tabs at.&lt;/p&gt;
&lt;p&gt;If you’re on Linux or Mac you can speed up the process of creating a TST group
by copying the following into an executable shell script and placing it
in your &lt;code class=&quot;language-text&quot;&gt;$PATH&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/usr/bin/fish&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Usage: tabgroup ARG1 ARG2...ARGN&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Purpose: Open up one or more temporary treestyletab&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# groups in Firefox with the specified names.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; tabgroup
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; not count &lt;span class=&quot;token variable&quot;&gt;$argv&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
  end
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; title &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$argv&lt;/span&gt;
    firefox &lt;span class=&quot;token string&quot;&gt;&quot;about:treestyletab-group?title=&lt;span class=&quot;token variable&quot;&gt;$title&lt;/span&gt;&quot;&lt;/span&gt;
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure you have &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt; installed
otherwise you won’t able to run this script.&lt;/p&gt;
&lt;p&gt;Once you have the script ready to go, you can pop open a terminal and create either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A single TST group:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;tabgroup mytabgroup&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple TST groups:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;tabgroup groupone grouptwo groupthree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[This is the first post on my new blog, how exciting!  Stay tuned for more interesting writing on topics like programming, technology…]]></description><link>https://gatsby-starter-blog-demo.netlify.com//hello-world/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.com//hello-world/</guid><pubDate>Thu, 25 Apr 2019 02:37:34 GMT</pubDate><content:encoded>&lt;p&gt;This is the first post on my new blog, how exciting! &lt;/p&gt;
&lt;p&gt;Stay tuned for more interesting writing on topics like programming, technology, productivity, and more.&lt;/p&gt;</content:encoded></item></channel></rss>