{"data":{"site":{"siteMetadata":{"title":"The Blog","author":"Sirrah23"}},"markdownRemark":{"id":"5b149895-521b-50d3-a4ee-40d125e70493","excerpt":"When building a web application these days there’s a general pattern of\nseparating it into: A front-end server which serves your application A back-end server…","html":"<p>When building a web application these days there’s a general pattern of\nseparating it into:</p>\n<ul>\n<li>A front-end server which serves your application</li>\n<li>A back-end server which serves your API (REST, or something else)</li>\n</ul>\n<p>Let’s say that your developing an application locally with your servers\nlistening on the following hosts:</p>\n<ul>\n<li>Front-end -> <code class=\"language-text\">http://localhost:3000</code></li>\n<li>Back-end -> <code class=\"language-text\">http://localhost:4000</code></li>\n</ul>\n<p>From your internet browser you’ll navigate to <code class=\"language-text\">http:localhost:3000</code> so that you\ncan access and interact with your application. However, if your application\ntries to reach out to the back-end server API, you’ll probably see an error\nmessage that looks something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:3000&#39; is therefore not allowed access.</code></pre></div>\n<p>This is because <code class=\"language-text\">http://localhost:3000</code> and <code class=\"language-text\">http:localhost:4000</code> are considered\ndifferent hosts due to their differing port numbers. Your browser, for security\nreasons, is preventing the application that you’re looking at (served via your\nfront-end server) from reaching out to, from its perspective, some unknown and\npotentially hostile server on the internet (served via your back-end server).</p>\n<p>If you do some digging you’ll find that you can solve the problem by:</p>\n<ol>\n<li>Adding the <code class=\"language-text\">Access-Control-Allow-Origin: *</code> header to the http requests made\nfrom your front-end server</li>\n<li>Importing a library and using it to scaffold basic CORS on your back-end\nserver</li>\n</ol>\n<p>But wait! Since this is in local development, there’s a better way to solve the\nproblem. You can have your front-end server proxy API requests to your back-end\nserver.</p>\n<p>The idea behind proxying here is that your browser will only ever reach out to\n<code class=\"language-text\">http://localhost:3000</code>. However, you can then have your front-end server pass\nAPI requests through to <code class=\"language-text\">http://localhost:4000</code> and return whatever the back-end\nserver responds with back to the application running in your browser. This way\nyour browser will never know that another server even exists. It’ll have nothing\nto complain about.</p>\n<p>Modern web frameworks all have different ways of setting up this kind of\nproxying. For example, if you’re using <a href=\"https://vuejs.org/\">Vue.js</a>, then you\ncan add <a href=\"https://cli.vuejs.org/config/#devserver-proxy\">this</a> option to your\n<code class=\"language-text\">vue.config.js</code> file, and you’re good to go!</p>\n<p>I highly recommend this approach as it’s much easier than fiddling with CORS,\nespecially if it won’t even be an issue for you in production.</p>","frontmatter":{"title":"Proxy API requests in local development","date":"November 01, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/local-development-devproxy/","previous":{"fields":{"slug":"/readers-scale-organizations/"},"frontmatter":{"title":"Readers will scale your organization"}},"next":null}}